trigger:
# The below are triggers for branch analysis
# Triggers for pull requests are implemented through branch policies
- master
- main
- feature/*
- release*

# Periodic builds
schedules:
# Run every Monday and Thu at 5:30 UTC (https://docs.microsoft.com/en-us/azure/devops/pipelines/process/scheduled-triggers?view=azure-devops&tabs=yaml#cron-syntax)
# Cron format: mm HH DD MM DoW
- cron: "30 5 * * 1,4"
  branches:
    include:
    - main
    - master
    - release*
  # Run pipeline even if there is no code change on the branch
  always: true

variables:
# Make service connection name a configurable variable to switch
# from one SonarQube instance to another easily
- name: SONAR_SERVICE_CONNECTION
  value: 'SQ LATEST'

pool:
  vmImage: 'ubuntu-latest'

steps:
  - task: UseDotNet@2
    displayName: 'Select .Net Core version'
    inputs:
      version: '5.x'
      packageType: runtime

  - task: SonarQubePrepare@5
    displayName: '.Net Scanner BEGIN'
    inputs:
      # Select your Azure Service Connection name for SonarQube here
      SonarQube: ${{ variables.SONAR_SERVICE_CONNECTION }}

      # Select scanner to use:
      # 'MSBuild': For Scanner for .Net, ie for .Net Framework (MSBuild) or .Net Core (dotnet build)
      # 'Cli': For Scanner CLI (sonar-scanner)
      # 'Other': For Scanner for Maven or Scanner for Gradle
      scannerMode: 'MSBuild'

      # Define your sonar.projectKey here
      projectKey: 'demo:github-azdo-dotnetcore'

      # Add the analysis specific properties here like
      # sonar.exclusions etc...
      # sonar.analysis.* is an example of pipeline metadata sent to SonarQube

      #  sonar.pullrequest.key=$(System.PullRequest.PullRequestId)
      #  sonar.pullrequest.branch=$(System.PullRequest.SourceBranch)
      extraProperties: |
        sonar.projectName=GitHub / AzDO / .Net Core
        sonar.verbose=true
        sonar.analysis.buildNumber=$(Build.BuildId)

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: 'build'
      # arguments: ''

  - task: SonarQubeAnalyze@5
    # No parameters ever needed for this task except an optional displayName
    displayName: '.Net Scanner END'

  # **Optional** task to publish quality in Azure DevOps
  - task: SonarQubePublish@5
    displayName: 'Publish quality gate'
    inputs:
      # Max duration in s to wait for the Quality Gate
      pollingTimeoutSec: '300'

